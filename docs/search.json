[
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "grpEHR training",
    "section": "Introduction",
    "text": "Introduction\nThis is the training material for grpEHR.\nCurrently there are two parts; an introduction to Git and GitHub with a short exercise to complete, and best practice."
  },
  {
    "objectID": "01-index.html#introduction",
    "href": "01-index.html#introduction",
    "title": "Introduction to using Git and GitHub",
    "section": "Introduction",
    "text": "Introduction\nThe following is intended as a set of tips for people learning how to use Git and GitHub."
  },
  {
    "objectID": "01-index.html#session-aims",
    "href": "01-index.html#session-aims",
    "title": "Introduction to using Git and GitHub",
    "section": "Session aims",
    "text": "Session aims\nBy the end of the session you should\n\nhave a basic understanding of how Git works\nbe able to install Git and GitHub Desktop on your computer\nbe able to perform common Git operations using GitHub Desktop and the GitHub web interface, including\n\nclone a repo from GitHub\nmake a new branch\nmake commits\npush your branch to GitHub\nmake a pull request"
  },
  {
    "objectID": "01-index.html#guides-to-git-and-github",
    "href": "01-index.html#guides-to-git-and-github",
    "title": "Introduction to using Git and GitHub",
    "section": "Guides to Git and GitHub",
    "text": "Guides to Git and GitHub\nThere are many excellent guides to Git and GitHub online, e.g.,\n\nIntro to GitHub here\nGitHub Training & Guides YouTube channel here\nGit documentation and training here\nHadley Wickham on Git here\nJenny Bryan on Git and GitHub with R here\n\nAnd most relevantly the OpenSAFELY documentation here."
  },
  {
    "objectID": "01-01-intro-git.html#background-info",
    "href": "01-01-intro-git.html#background-info",
    "title": "1  Intro to Git",
    "section": "1.1 Background info",
    "text": "1.1 Background info\n\nGit was written to allow developers work on the source code of the Linux kernel (text files)\n\nOne kernel release they got in a terrible mess\nThis provoked Linus Torvalds into action\nFor an excellent insight into his thinking watch this talk he gave at Google here\n\n(Especially if used at the command line) Git can be intimidating to use and we can get Git errors (which like LaTeX and R errors can be quite cryptic)\n\n\n\n\n\nImage:  xkcd.com/1597\n\n\n\n\n\nA Git repository is a folder/directory on your computer which has been Git initialised\n\nUsing either the command line\ngit init mynewfolder\nOr GitHub Desktop\n\n\n\n\n\n\n\n\n\nRepos on GitHub are already Git initialised\n\nWhen you clone them down to your computer they work in GitHub Desktop\n\n\nGit is commonly referred to as version control software\nGit is better described as a content addressable filesystem which translates to Git tracks the contents of the files in your repo\n\nGit creates a little database of the contents of your files - snapshots (commits) are taken when you tell it to\nGit looks for changes in your files when you save them, so when you have unsaved changes in a file/s Git shows no changes until you save\n\n\n\n\n\n\n\n\n\nGit takes snapshots of your files - when you tell it to - commits - I saved my file from above, enter a commit message and click “Commit to master”\n\n\n\n\n\n\n\n\n\nCommits are identified by the 40-character checksum SHA-1 hash of the contents of your files at that time\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGit knows the state of your files at every commit\n\nYou can easily restore your files to a previous state\n\nFor Git the state of your files only changes when their contents change\n\nIf you reopen a file, make no changes, then close it, Git will show no changes in your repo\nIf you add an empty folder/directory to your repo Git will show no changes in your repo\nThis differs to OneDrive/SharePoint/Google Drive which are file synchronisation systems\n\nI recommend not to place your Git repos in a location that is sync’d by either OneDrive or Google Drive"
  },
  {
    "objectID": "01-01-intro-git.html#the-.git-folder",
    "href": "01-01-intro-git.html#the-.git-folder",
    "title": "1  Intro to Git",
    "section": "1.2 The .git folder",
    "text": "1.2 The .git folder\n\nWhen you initialise a directory the .git folder is created\nThis contains all of the files Git uses to track the contents of your files\nHere is the .git folder of a repo on my computer (I have selected to View hidden files in Windows Explorer)\n\n\n\n\n\n\n\n\n\nGitHub (and Git servers in general) store repositories as bare repositories. This means that they only contain the .git directory which is on your local machine. Hence perhaps a little confusingly when you view your repository on GitHub you cannot see the .git directory listed in the repo contents (as you see in a File Explorer on your local machine).\n\n\n\n\n\n\n\n\n\nHere are its contents - don’t edit these manually\n\n\n\n\n\n\n\n\n\nExplanation of these is (from here)"
  },
  {
    "objectID": "01-01-intro-git.html#common-git-commands",
    "href": "01-01-intro-git.html#common-git-commands",
    "title": "1  Intro to Git",
    "section": "1.3 Common Git commands",
    "text": "1.3 Common Git commands\n\nI recommend you use GitHub Desktop instead of these commands\nThese commands are what GitHub Desktop is using behind the scenes\nGit is the name of the program, git is the name of the executable available at your command line\ngit init \ngit add &lt;filename&gt;\ngit status\ngit commit -m \"Your commit message\"\ngit commit --amend -m \"Your amended commit message\"\ngit push \ngit pull \ngit clone\ngit branch\ngit checkout\ngit merge\ngit fetch \nIf you use one of these commands and receive an error message including the text\nfatal: not under version control\nit likely means that you have made a typo in the filename you included in your Git command."
  },
  {
    "objectID": "01-02-installing-git.html#installing-git",
    "href": "01-02-installing-git.html#installing-git",
    "title": "2  Installing Git and GitHub Desktop",
    "section": "2.1 Installing Git",
    "text": "2.1 Installing Git\n(It turns out that GitHub Desktop has a version of Git within it. If you only ever intend to use Git through GitHub Desktop you don’t need to install Git and can skip to the GitHub Desktop section.)\n\nWindows\n\nDownload and install from here\n\nmacOS comes with an out-dated version of Git\n\nI recommend installing the Homebrew version\nFirst install Homebrew, see instructions here\nThen run in your Terminal app\nbrew upgrade\nbrew install git\nAdditionally on a Mac it is helpful to install Xcode command line tools (i.e., avoid installing the whole of Xcode.)\nxcode-select --install\n\nYou must reinstall these tools everytime you upgrade macOS major versions, e.g., when you’ve upgraded from Big Sur to Monterey etc.\n\n\nOnce Git is installed its executable (called git on macOS and Linux and git.exe on Windows) should be available at your command line\n\nCheck which version you have with (you want something recent-ish)\ngit --version\nOn my Mac currently I have\ngit version 2.39.1"
  },
  {
    "objectID": "01-02-installing-git.html#installing-github-desktop",
    "href": "01-02-installing-git.html#installing-github-desktop",
    "title": "2  Installing Git and GitHub Desktop",
    "section": "2.2 Installing GitHub Desktop",
    "text": "2.2 Installing GitHub Desktop\n\nYou could use Git through its command syntax however I recommend you use a graphical Git client\nFor Windows and macOS download and install GitHub Desktop from here\nA Linux version of GitHub Desktop is available from here\nI recommend installing the free VSCode text editor, from here, and setting that as the “External editor” in GitHub Desktop options (Click: File | Options…)\n\n\n\n\n\n\n\n\n\nOn Windows I also recommend installing Windows Terminal from here"
  },
  {
    "objectID": "01-03-intro-github.html#github-pat-for-r",
    "href": "01-03-intro-github.html#github-pat-for-r",
    "title": "3  Intro to GitHub",
    "section": "3.1 GitHub PAT for R",
    "text": "3.1 GitHub PAT for R\n\nTo create a GitHub Personal Access Token (PAT) to be allowed more downloads from GitHub per hour run in R\n\ninstall.packages(\"usethis\")\nlibrary(usethis)\ncreate_github_token()"
  },
  {
    "objectID": "01-03-intro-github.html#github-cli",
    "href": "01-03-intro-github.html#github-cli",
    "title": "3  Intro to GitHub",
    "section": "3.2 GitHub CLI",
    "text": "3.2 GitHub CLI\n\nGitHub CLI stands for command line interface for operating GitHub\nInstallation instructions are here\nBut I don’t recommend using this"
  },
  {
    "objectID": "01-04-git-and-github-workflow.html#standard-github-workflow",
    "href": "01-04-git-and-github-workflow.html#standard-github-workflow",
    "title": "4  Git and GitHub Workflow",
    "section": "4.1 Standard GitHub workflow",
    "text": "4.1 Standard GitHub workflow\n\n(I recommend to only fork a public repo if you intend to send a pull request to it)\nFork the other person’s repo (this will be known as the upstream repo from your fork, your copy of a repo on GitHub is known as origin)\nThis creates a copy of their repo under your account (your fork)\nClone your fork (the copy under your account) to your machine\nCreate a new branch (do not work on master/main)\nMake your changes and commit them\nPush your new branch upto your GitHub (i.e., to your fork)\nCreate a pull request (from your new branch) back to the default (master/main) branch of the original repo"
  },
  {
    "objectID": "01-04-git-and-github-workflow.html#workflow-with-an-opensafely-github-repo",
    "href": "01-04-git-and-github-workflow.html#workflow-with-an-opensafely-github-repo",
    "title": "4  Git and GitHub Workflow",
    "section": "4.2 Workflow with an OpenSAFELY GitHub repo",
    "text": "4.2 Workflow with an OpenSAFELY GitHub repo\n\nSkip the forking step from the standard GitHub workflow\nThe repo on GitHub is known as origin\nClone the repo to your local machine\n\nClick: Code | Open with GitHub Desktop\n\n\n\n\n\n\n\n\n\nClick Clone in the box which appears in GitHub Desktop\n\n\n\n\n\n\n\n\n\nGo to the Making a pull request page here"
  },
  {
    "objectID": "01-05-making-pull-request.html#making-a-pull-request",
    "href": "01-05-making-pull-request.html#making-a-pull-request",
    "title": "5  Making a pull request",
    "section": "5.1 Making a pull request",
    "text": "5.1 Making a pull request\n\nLet’s start by creating a new branch\n\n\n\n\n\n\n\n\n\nWe do some work (in VSCode/text editor/RStudio) which creates a markdown file with a title and some text. We then make a new commit which adds this new file to the repo\n\n\n\n\n\n\n\n\n\nNext publish the new branch to GitHub\n\n\n\n\n\n\n\n\n\nNow initiate the creation of the PR by either clicking in GitHub Desktop “Create Pull Request”\n\n\n\n\n\n\n\n\n\nor clicking on the button on the repo webpage “Compare & pull request”\n\n\n\n\n\n\n\n\n\nEdit the title box, add some extra text in the comment box, select a reviewer, and then click “Create pull request”\n\n\n\n\n\n\n\n\n\nYou can amend/edit pull requests by modifying/adding commits to the branch from which you sent the PR\nSee more about pull request reviews here\n(The reviewer) will then merge your PR\n\n\n\n\n\n\n\n\n\n(The reviewer) will then confirm the merge\n\n\n\n\n\n\n\n\n\n(Optional) Delete the branch the PR came from\n\n\n\n\n\n\n\n\n\nThe PR is now finished and we can see the merge commit in the default (main/master) branch\n\n\n\n\n\n\n\n\n\nIn GitHub Desktop click “Fetch origin”/“Pull origin” to pull the updated main/master branch down to your local machine … and the process begins again …"
  },
  {
    "objectID": "01-06-merging-branch-locally.html#merging-a-branch-locally",
    "href": "01-06-merging-branch-locally.html#merging-a-branch-locally",
    "title": "6  Merging a branch locally",
    "section": "6.1 Merging a branch locally",
    "text": "6.1 Merging a branch locally\n\nA PR is essentially doing a merge on GitHub, you can merge branches locally as well\nSay we created a new branch edit-readme and made a commit on it\nTo merge edit-readme into main switch to main\n\n\n\n\n\n\n\n\n\nSelect edit-readme and click “Create a merge commit”\n\n\n\n\n\n\n\n\n\nThen push the new commits onto main upto GitHub (when appropriate)\n\n\n\n\n\n\n\n\n\nThen you can delete the edit-readme branch\n\n\n\n\n\n\n\n\n\nConfirm the deletion"
  },
  {
    "objectID": "01-07-rebasing-branch.html#rebasing-a-branch",
    "href": "01-07-rebasing-branch.html#rebasing-a-branch",
    "title": "7  Rebasing a branch",
    "section": "7.1 Rebasing a branch",
    "text": "7.1 Rebasing a branch\n\nPerforming a rebase puts the commits you have on your branch on top of the commits from another branch\nWe commonly do this when our colleagues have merged PRs into say the main branch\nWe would then rebase our branch on top of main\nA rebase can be performed in GitHub Desktop as follows\n\nIn these screenshots we assume we started working on branch-1\nWe then made branch-2 from branch-1 and made some commits on it\nWe then went back to branch-1 and made some different commits\nWe now need to rebase the commits on branch-2 to be on top of branch-1\nStarting on branch-2, select Branch | Rebase current branch…\n\n\n\n\n\n\n\n\n\nOr/then from the middle panel select the branch to rebase on top of - select branch-1 (or select main if you are rebasing on top of main) and click Rebase\n\n\n\n\n\n\n\n\n\nHopefully the rebase will be successful, if there are merge conflicts you will need to resolve those"
  },
  {
    "objectID": "01-08-common-errors.html#merge-conflicts",
    "href": "01-08-common-errors.html#merge-conflicts",
    "title": "8  Common errors",
    "section": "8.1 Merge conflicts",
    "text": "8.1 Merge conflicts\n\nThese can happen if e.g.,\n\nyou forget to pull down the latest changes from GitHub (I find it’s easy to forget to do this in the morning)\nif you’re working on a project with multiple people\n\nyou both create new branches\nthey send in their PR first and it’s merged\nthen you send in your PR which edits some of the same lines\n\n\nLet’s say I made changes yesterday which I pushed to GitHub\n\nThe next day I restart work on a different computer, GitHub Desktop will show for example\n\n\n\n\n\n\n\n\n\n\nBut you forget to click “Pull origin”\nIf you make commits onto a branch on which there are not yet pulled commits on GitHub you’ll get a merge error when you eventually click “Pull origin”\n\n\n\n\n\n\n\n\n\nYou could resolve conflict e.g., in VSCode\n\n\n\n\n\n\n\n\n\nWe can see this can happen when we see both up and down arrows in Pull origin box (but not always)\n\n\n\n\n\n\n\n\n\nFix\n\nMove your changes to a new branch\n\n\n\n\n\n\n\n\n\nMove back to master/main and revert/undo the changes there, then edit the files so they show no changes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPull down the changes from GitHub to the relevant branch\n\n\n\n\n\n\n\n\n\nMerge changes from your new branch into the main/master/relevant branch\n\nSee the GitHub documentation for more information about merge conflicts\n\nhere\nResolving a merge conflict here"
  },
  {
    "objectID": "01-08-common-errors.html#no-content-changes-found",
    "href": "01-08-common-errors.html#no-content-changes-found",
    "title": "8  Common errors",
    "section": "8.2 No content changes found",
    "text": "8.2 No content changes found\n\nIf you see the following message from Git that a file has changed but there are No content changes found\n\n\n\n\n\n\n\n\n\nThis is most likely caused by working with colleagues using different operating systems, because they save text files with different line ending characters (CRLF on Windows, LF on macOS/Linux/Unix)\nYou can usually simply right click on the offending file in GitHub Desktop and Discard changes\n\n\n\n\n\n\n\n\n\nAdditionally you can set the following option at the top of your .gitattributes file\n# Auto detect text files and perform LF normalization\n* text=auto"
  },
  {
    "objectID": "01-09-installing-python-and-os.html#macos",
    "href": "01-09-installing-python-and-os.html#macos",
    "title": "9  Installing Python and the opensafely command line interface",
    "section": "9.1 macOS",
    "text": "9.1 macOS\n\nIf you have a Mac, the macOS operating system comes with an old-ish version of Python 2.7\nI recommend installing Python 3 through homebrew\nbrew install python\nWhen you open Terminal\n\nSee the contents of PATH with echo $PATH (note use ${PATH} in shell scripts)\nyou should be able to find the python/python3 exectables with the which command"
  },
  {
    "objectID": "01-09-installing-python-and-os.html#windows",
    "href": "01-09-installing-python-and-os.html#windows",
    "title": "9  Installing Python and the opensafely command line interface",
    "section": "9.2 Windows",
    "text": "9.2 Windows\n\nYou have a number of choices where to install Python from\n\nMicrosoft store, .e.g. Python 3.10 from here\nPython installer from here\nAnaconda installer from here\n\nDespite not being recommend - it is better for you to add Anaconda/Python to your PATH in the installer options, i.e., check the first box on this screen\n\n\n\n\n\n\n\n\n\n\nAnd in the Python installer check the box adding Python to PATH\n\n\n\n\n\n\n\n\n\n\nOpen Windows Terminal\n\nyou can see the contents of PATH in Powershell with $Env:Path\n\n\n\n\n\n\n\n\n\nand in cmd with echo %PATH%\n\n\n\n\n\n\n\n\n\nyou can see the location of the Python executable in cmd with where python/where python3\n\n\n\n\n\n\n\n\n\n\nIf you installed Anaconda and you did not add its folders to PATH then you need to install and run opensafely using the Anaconda prompt - you find this as a program under the Start menu"
  },
  {
    "objectID": "01-09-installing-python-and-os.html#installing-the-opensafely-package",
    "href": "01-09-installing-python-and-os.html#installing-the-opensafely-package",
    "title": "9  Installing Python and the opensafely command line interface",
    "section": "9.3 Installing the opensafely package",
    "text": "9.3 Installing the opensafely package\n\nAs long as the python/python3 and pip/pip3 executables are now on your PATH you can simply run in your shell program\npip install opensafely   \nThis will additionally install its dependency package the cohortextractor package into your Python installation and you should now be able to run opensafely commands such as\nopensafely run run_all"
  },
  {
    "objectID": "01-10-os-repos.html#demo-repo",
    "href": "01-10-os-repos.html#demo-repo",
    "title": "10  OpenSAFELY repositories",
    "section": "10.1 Demo repo",
    "text": "10.1 Demo repo\n\nHave a look at the demo repo here"
  },
  {
    "objectID": "01-10-os-repos.html#getting-started",
    "href": "01-10-os-repos.html#getting-started",
    "title": "10  OpenSAFELY repositories",
    "section": "10.2 Getting started",
    "text": "10.2 Getting started\n\nSee OS page here\nIf creating a new repo create from the OS template here\n\n\n\n\n\n\n\n\n\nThis is already Git initialized\nImportant files\n\nproject.yaml\n\nDefines the jobs and the order in which they run\n\n/analysis/study_defintion.py\n\nDefines the study population extracted from the OpenSAFELY database\nThis should return .csv file/s of data to read into R\n\n/analysis/##_R-scripts.R\n\nYour analysis scripts (where ## is the number of your script)"
  },
  {
    "objectID": "01-10-os-repos.html#running-jobs-on-the-dummy-data",
    "href": "01-10-os-repos.html#running-jobs-on-the-dummy-data",
    "title": "10  OpenSAFELY repositories",
    "section": "10.3 Running jobs (on the dummy data)",
    "text": "10.3 Running jobs (on the dummy data)\nThere are a couple of ways to run jobs on the dummy data system.\n\nIn your OpenSAFELY repo online\n\nUse Gitpod\n\nOn your own machine, in which case please install the following free software\n\nIf on Windows - Windows Subsystem for Linux version 2, using the instructions here\nDocker Desktop, from here\nPython (described on a previous page here)\nGit (described on previous page here)\nGitHub Desktop, from here\nVSCode text editor, from here"
  },
  {
    "objectID": "01-11-additional-topics.html#avoid-making-commits-with-lots-changes",
    "href": "01-11-additional-topics.html#avoid-making-commits-with-lots-changes",
    "title": "11  Additional topics",
    "section": "11.1 Avoid making commits with lots changes",
    "text": "11.1 Avoid making commits with lots changes\n\nDo not commit changes to many files with a single commit message such as “Edits”!\n\n\n\n\n\n\n\n\n\nNote that in a commit we can see the added lines - green highlight with + prefix - and deleted lines - red highligh with - prefix"
  },
  {
    "objectID": "01-11-additional-topics.html#writing-good-commit-messages",
    "href": "01-11-additional-topics.html#writing-good-commit-messages",
    "title": "11  Additional topics",
    "section": "11.2 Writing good commit messages",
    "text": "11.2 Writing good commit messages\n\nFollow the standard recommendations about making commit messages, see\n\nhere and\nhere"
  },
  {
    "objectID": "01-11-additional-topics.html#files-for-git-to-ignore",
    "href": "01-11-additional-topics.html#files-for-git-to-ignore",
    "title": "11  Additional topics",
    "section": "11.3 Files for Git to ignore",
    "text": "11.3 Files for Git to ignore\n\nYou should not commit all files in the folder on your computer into your repo\nThe .gitignore file is a list of files and folders in your repo for Git to ignore\nCommon files to ignore are\n\n.Rhistory\n.DS_Store\nif using an RStudio project ignore the .Rproj.user directory with syntax .Rproj.user/\n\nIt is helpful to setup a global .gitignore file to ignore certain operating system files from all of your repositories, e.g., .DS_Store on macOS or Thumbs.db on Windows. To do this on macOS, following the example here, we could run the following commands in a shell\necho \".DS_Store\" &gt; ~/.gitignore_global\ngit config --global core.excludesfile ~/.gitignore_global"
  },
  {
    "objectID": "01-11-additional-topics.html#github-repos-contain-more-than-just-code",
    "href": "01-11-additional-topics.html#github-repos-contain-more-than-just-code",
    "title": "11  Additional topics",
    "section": "11.4 GitHub repos contain more than just code",
    "text": "11.4 GitHub repos contain more than just code\n\nA repo for an R package will probably contain\n\nThe code for the R package\nThe code for its website (often made with pkgdown and hosted with GitHub Pages or Netlify)\n\n\n\n\n\n\n\n\n\nScripts for controlling continuous integration services such as GitHub Actions"
  },
  {
    "objectID": "01-12-short-practical.html#short-practical",
    "href": "01-12-short-practical.html#short-practical",
    "title": "12  Short practical",
    "section": "12.1 Short practical",
    "text": "12.1 Short practical\n\nOn GitHub:\n\nGo to our test repo (in our test organization) here\n\n\n\n\n\n\n\n\n\nClone the repo to your local machine\n\nIn GitHub Desktop: make a new branch and switch to it\nIn any text editor:\n\nCreate a new markdown file called yourfirstname-yourlastname.md\nAdd a sentence or two to the file about yourself, e.g.,\n\n\n\n\n\n\n\n\n\nSave this file into the (top level of the) repo\n\nIn GitHub Desktop: Commit this new file into your new branch\nIn GitHub Desktop: Push your new branch upto GitHub\nOn GitHub: Open a pull request from your branch to the main branch in which you select a reviewer (Tom/Venexia/Elsie)\nIn your text editor and GitHub Desktop: Make any changes requested by the reviewer and add these to your PR - hopefully your pull request will then be merged by the reviewer!\nOn GitHub: Delete the branch you made your pull request from\nIn GitHub Desktop: Pull down the updated master branch to your machine … in a real workflow you would then make another new branch and do more work…"
  },
  {
    "objectID": "02-index.html#introduction",
    "href": "02-index.html#introduction",
    "title": "grpEHR best practice in the OpenSAFELY system",
    "section": "Introduction",
    "text": "Introduction\nThe following is intended as a set of tips for users of the OpenSAFELY system at the University of Bristol.\nPlease use the menu to the left to read the different sections."
  },
  {
    "objectID": "02-01-study-definition.html#reproducibile-dummy-data",
    "href": "02-01-study-definition.html#reproducibile-dummy-data",
    "title": "13  Study definition",
    "section": "13.1 Reproducibile dummy data",
    "text": "13.1 Reproducibile dummy data\n\nTo ensure the dummy data system generates exactly the same data every time you run it, set a random number generator seed at the top of the study_definition.py file\nimport numpy as np\n# Change this number to one for which your scripts \n# successfully run on the dummy data\nnp.random.seed(123456)"
  },
  {
    "objectID": "02-01-study-definition.html#file-formats",
    "href": "02-01-study-definition.html#file-formats",
    "title": "13  Study definition",
    "section": "13.2 File formats",
    "text": "13.2 File formats\n\nUse .feather files for outputs from the cohortextractor, so specify an action in your project.yaml as follows\ngenerate_study_population:\n  run: cohortextractor:latest generate_cohort --study-definition study_definition --output-format feather\n needs: \n  - design\n  outputs:\n    highly_sensitive:\n      cohort: output/input.feather\nUse the arrow package to read .feather files into R\narrow::read_feather(file = file.path(\"output\", \"input.feather\"))\n\nThe col_select argument can be used to read in just the columns you need\n\nStart each project with a preprocessing action that formats .feather files and outputs (gzipped) .rds files which can be saved with readr::write_rds()\nreadr::write_rds(object, \n                 file.path(\"output\", \"mydata.rds\"), \n                 compress = \"gz\")"
  },
  {
    "objectID": "02-02-r-code.html#file-formats",
    "href": "02-02-r-code.html#file-formats",
    "title": "14  R code",
    "section": "14.1 File formats",
    "text": "14.1 File formats\n\nAs per the study definition best practice, outputs from the cohortextractor should be provided as .rds files\nUse the readr package to read and write .rds files\nobject &lt;- readr::read_rds(file.path(\"output\", \"mydata.rds\"))\nreadr::write_rds(object, \n                 file.path(\"output\", \"mydata.rds\"),\n                 compress = \"gz\")\n\n\n\nAll .rds files should all be classified as highly_sensitive in actions, as they cannot be opened on the results server and therefore cannot be reviewed or released.\nreadr::write_rds() does not compress files by default. It is recommended that you compress .rds files using the argument compress = \"gz\".\nUse file.path() to construct file paths that are reproducible across operating systems."
  },
  {
    "objectID": "02-02-r-code.html#supported-packages",
    "href": "02-02-r-code.html#supported-packages",
    "title": "14  R code",
    "section": "14.2 Supported packages",
    "text": "14.2 Supported packages\n\nThe R packages (and their version number) which are installed in the OpenSAFELY R Docker container are listed here\nTo request a new package, which should be on CRAN, open a new issue here, including the link to its CRAN webpage"
  },
  {
    "objectID": "02-02-r-code.html#rstudio-project",
    "href": "02-02-r-code.html#rstudio-project",
    "title": "14  R code",
    "section": "14.3 RStudio project",
    "text": "14.3 RStudio project\n\nDefine your repo as an RStudio project in RStudio as follows\n\nFile | New Project…\n\n\n\n\n\n\n\n\n\nExisting Directory\n\n\n\n\n\n\n\n\n\nThen find your repo\nThis will create a .Rproj file at the top level of your repo\nCommit the file into your repo\nNow you can double click the .Rproj file to open the repo in RStudio, so you can work on your R scripts more conveniently"
  },
  {
    "objectID": "02-03-outputs.html#tables",
    "href": "02-03-outputs.html#tables",
    "title": "15  Outputs for release",
    "section": "15.1 Tables",
    "text": "15.1 Tables\n\nUse readr::write_csv() to save .csv files that will be sent to output checkers (this is about twice as fast as utils::write.csv() and does not write row names).\nreadr::write_csv(object, \n                 file = file.path(\"output\", \"mydata.csv\"))\nDo not save outputs to subdirectories of the output folder, otherwise running the study definition on GitHub Actions will probably fail with an error message such as\n\n\n\n\n\n\n\n\n\nError in file(file, ifelse(append, \"a\", \"w\")) : \n   cannot open the connection\n Calls: write.csv -&gt; eval.parent -&gt; eval -&gt; eval -&gt; write.table -&gt; file\n In addition: Warning message:\n In file(file, ifelse(append, \"a\", \"w\")) :\n   cannot open file '/workspace/output/descriptive/tables/table1.csv': No such file or directory\n Backtrace:\n 1: file(file, ifelse(append, \"a\", \"w\"))\n 2: write.table(table1_all$table_body, here::here(\"output\", \"descriptive\", \n 3: eval(expr, p)\n 4: eval(expr, p)\n 5: eval.parent(Call)\n 6: write.csv(table1_all$table_body, here::here(\"output\", \"descriptive\",\n\nError: Process completed with exit code 1."
  },
  {
    "objectID": "02-03-outputs.html#figures",
    "href": "02-03-outputs.html#figures",
    "title": "15  Outputs for release",
    "section": "15.2 Figures",
    "text": "15.2 Figures\n\nUse .svg for figure outputs that will be sent to output checkers\nWhere applicable (e.g., histograms), start the x-axis at 5 instead of 0 to ensure low counts are not exported"
  },
  {
    "objectID": "02-03-outputs.html#releasing-output",
    "href": "02-03-outputs.html#releasing-output",
    "title": "15  Outputs for release",
    "section": "15.3 Releasing output",
    "text": "15.3 Releasing output\n\nEnsure your outputs are in the correct formats\n\n.csv (not .rds or .Rdata) for tables of data\n.txt or .html if you want to view them in L4\n\nEnsure your outputs are marked as moderately_sensitive in your project.yaml\nTo release an output, please complete the ‘Output files for review’ section of this form and email to your assigned Bristol L4 access person\nBristol L4 access people will check the output on the server on your behalf, complete the rest of the form (including files locations), and email to datarelease@opensafely.org for final approval"
  },
  {
    "objectID": "02-04-misc.html#text-files",
    "href": "02-04-misc.html#text-files",
    "title": "16  Miscellaneous",
    "section": "16.1 Text files",
    "text": "16.1 Text files\n\nText files should end with a newline character (i.e., a blank line)\n\nIf you see the following red icon at the end of a file on GitHub, simply press ↵ Enter at the end of the file (i.e., in this case after the word Catalog), resave, commit, and the red icon should be gone"
  },
  {
    "objectID": "02-04-misc.html#python-and-r-versions",
    "href": "02-04-misc.html#python-and-r-versions",
    "title": "16  Miscellaneous",
    "section": "16.2 Python and R versions",
    "text": "16.2 Python and R versions\n\nThe versions of Python and R in their respective OpenSAFELY Docker containers are (as of 15th February 2023):\n\nPython 3.8.10\nR 4.0.5 (was R 4.0.2 upto and including 15/02/2023)\n\nThe Python and R code run within their respective Docker containers. Hence the version of Python and R used to run your analyses are the versions of Python and R in these Docker containers and not the versions of Python and R on your computer\nTo see the Python version number insert in your study_definition.py\nimport sys\nprint(sys.implementation.version)\nTo see the R version number insert into one of your R analysis scripts\nprint(R.version.string)"
  },
  {
    "objectID": "02-04-misc.html#code-review",
    "href": "02-04-misc.html#code-review",
    "title": "16  Miscellaneous",
    "section": "16.3 Code review",
    "text": "16.3 Code review\nThe Tidyteam (i.e., of the tidyverse, tidymodels, and mlops) code review principles are available here bear in mind the comments relate more to coding packages rather than analysis scripts."
  },
  {
    "objectID": "02-05-docker-apple-silicon.html",
    "href": "02-05-docker-apple-silicon.html",
    "title": "17  Rosetta for Linux Docker feature on Apple Silicon Macs",
    "section": "",
    "text": "If you have an Apple Silicon Mac if you enable the Rosetta for Linux beta feature in Docker the OpenSAFELY Docker containers will run faster on your machine.\nTo enable this\n\nMake sure you have Docker version 4.16.0 or higher installed\nOpen the Docker dashboard and go into Settings (click the cog icon in top right hand corner)\nGo to Features in development and within that the Beta features tab\nCheck the box for Use Rosetta for x86/amd64 emulation on Apple Silicon\nClick Apply & restart"
  },
  {
    "objectID": "99-session-info.html#session-information",
    "href": "99-session-info.html#session-information",
    "title": "18  Session information for reproducibility",
    "section": "18.1 Session information",
    "text": "18.1 Session information\n\n\nClick here for session information\n\n\nsessionInfo()\n## R version 4.3.0 (2023-04-21)\n## Platform: aarch64-apple-darwin20 (64-bit)\n## Running under: macOS Ventura 13.4\n## \n## Matrix products: default\n## BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \n## LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n## \n## locale:\n## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n## \n## time zone: Europe/London\n## tzcode source: internal\n## \n## attached base packages:\n## [1] stats     graphics  grDevices utils     datasets  methods   base     \n## \n## loaded via a namespace (and not attached):\n##  [1] htmlwidgets_1.6.2 compiler_4.3.0    fastmap_1.1.1     cli_3.6.1        \n##  [5] tools_4.3.0       htmltools_0.5.5   rstudioapi_0.14   rmarkdown_2.22   \n##  [9] knitr_1.43        jsonlite_1.8.5    xfun_0.39         digest_0.6.31    \n## [13] rlang_1.1.1       evaluate_0.21\nsessioninfo::session_info()\n## ─ Session info ───────────────────────────────────────────────────────────────\n##  setting  value\n##  version  R version 4.3.0 (2023-04-21)\n##  os       macOS Ventura 13.4\n##  system   aarch64, darwin20\n##  ui       X11\n##  language (EN)\n##  collate  en_US.UTF-8\n##  ctype    en_US.UTF-8\n##  tz       Europe/London\n##  date     2023-06-16\n##  pandoc   3.1.3 @ /opt/homebrew/bin/ (via rmarkdown)\n## \n## ─ Packages ───────────────────────────────────────────────────────────────────\n##  package     * version date (UTC) lib source\n##  cli           3.6.1   2023-03-23 [1] CRAN (R 4.3.0)\n##  digest        0.6.31  2022-12-11 [1] CRAN (R 4.3.0)\n##  evaluate      0.21    2023-05-05 [1] CRAN (R 4.3.0)\n##  fastmap       1.1.1   2023-02-24 [1] CRAN (R 4.3.0)\n##  htmltools     0.5.5   2023-03-23 [1] CRAN (R 4.3.0)\n##  htmlwidgets   1.6.2   2023-03-17 [1] CRAN (R 4.3.0)\n##  jsonlite      1.8.5   2023-06-05 [1] CRAN (R 4.3.0)\n##  knitr         1.43    2023-05-25 [1] CRAN (R 4.3.0)\n##  rlang         1.1.1   2023-04-28 [1] CRAN (R 4.3.0)\n##  rmarkdown     2.22    2023-06-01 [1] CRAN (R 4.3.0)\n##  rstudioapi    0.14    2022-08-22 [1] CRAN (R 4.3.0)\n##  sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.3.0)\n##  xfun          0.39    2023-04-20 [1] CRAN (R 4.3.0)\n## \n##  [1] /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library\n## \n## ──────────────────────────────────────────────────────────────────────────────\nquarto::quarto_version()\n## [1] '1.3.361'"
  }
]